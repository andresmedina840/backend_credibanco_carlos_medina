name: 🚀 Deploy en AWS EC2 con Docker

on:
  push:
    branches:
      - main  # Se ejecuta cuando hay un push en la rama main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Clonar repositorio
        uses: actions/checkout@v4

      - name: 🔑 Configurar SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 🔄 Actualizar e instalar Docker y Docker Compose en EC2
        run: |
          ssh ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            sudo apt update && sudo apt upgrade -y
            sudo apt install -y docker.io docker-compose git
            sudo systemctl enable docker
            sudo systemctl start docker
            docker --version
            docker-compose --version
          EOF

      - name: 📤 Subir archivos a EC2
        run: |
          scp docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/
          scp Dockerfile ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/
          ssh ubuntu@${{ secrets.EC2_HOST }} 'echo "MYSQL_DATABASE=ticketsdb" > /home/ubuntu/.env'
          ssh ubuntu@${{ secrets.EC2_HOST }} 'echo "MYSQL_ROOT_PASSWORD=rootpassword" >> /home/ubuntu/.env'
          ssh ubuntu@${{ secrets.EC2_HOST }} 'echo "MYSQL_USER=ticketdev" >> /home/ubuntu/.env'
          ssh ubuntu@${{ secrets.EC2_HOST }} 'echo "MYSQL_PASSWORD=password" >> /home/ubuntu/.env'
          ssh ubuntu@${{ secrets.EC2_HOST }} 'echo "TZ=America/Bogota" >> /home/ubuntu/.env'

      - name: 🚀 Desplegar aplicación en EC2 con Docker Compose
        run: |
          ssh ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ubuntu
            docker-compose down
            docker-compose pull
            docker-compose up -d --build
          EOF

      - name: 🔍 Verificar que la API responde
        run: |
          sleep 10  # Espera para dar tiempo a levantar la API
          if curl -sSf http://${{ secrets.EC2_HOST }}:8080/api/health; then
            echo "✅ API funcionando correctamente"
          else
            echo "❌ ERROR: La API no responde"
            exit 1
          fi
